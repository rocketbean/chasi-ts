{
  "router": {
    "id": "router",
    "icon": "fork_right",
    "label": "Router",
    "display": true,
    "keywords": ["router", "routing"],
    "subcats": [
      {
        "to": "RouterServiceProvider",
        "label": "RouterServiceProvider"
      },
      {
        "to": "RouterConfigInterface",
        "label": "RouterConfigInterface",
        "group": [
          "rci-name","rci-auth", "rci-prefix", "rci-namespace",
          "rci-middleware","rci-controllerDir","rci-AuthRouteExceptions",
          "rci-data", "rci-mount", "rci-before", "rci-after", "rci-displayLog"
        ]
      },
      {
        "to": "RouterNamespace",
        "label": "RouterNamespace",
        "group": [
          "RouteEndpoint", "RouteGroup", "rgp-middleware", "rgp-prefix",
          "rgp-controller", "rgp-before", "rgp-after"
        ]
      }
    ],
    "glossary": [
      {
        "id": "RouterNamespace",
        "label": "Router Namespace",
        "sublabel": "[./src/container/http]",
        "keywords": ["router", "namespace"],
        "text": "A file where routing logic can be applied. This file might contain endpoint, groups or middleware declaration. Namespace allows route isolation, which can be useful for having multiple API's with different logic/implemantation. the file must export a default function and the route instance will be supplied as an argument which will be used to declare endpoint, group and routing logics. this will then be passed to the app registry and will be consumed before server boot event."
      },
      {
        "id": "RouteGroup",
        "label": "Router Group",
        "reference": ["RouterNamespace"],
        "keywords": ["router group", "RouteGroup", "namespace","group"],
        "text": "Route group is an endpoint wrapper which applies declared options to the wrapped endpoint, for instance a route prefix, controller, middleware, before and after request events. In case of middleware conflict, route endpoint declaration will be applied."
      },
      {
        "id": "rgp-middleware",
        "label": "middleware",
        "reference": ["RouteGroup"],
        "keywords": ["middleware", "router group middleware", "RouterConfigInterface","router"],
        "text": "array of middleware names, middlewares listed under this group will be implemented across the group endpoints"
      },
      {
        "id": "rgp-prefix",
        "label": "prefix",
        "reference": ["RouteGroup"],
        "keywords": ["prefix", "router group prefix", "RouterConfigInterface","router"],
        "text": "value will be prepended to the endpoint path."
      },
      {
        "id": "rgp-controller",
        "label": "controller",
        "reference": ["RouteGroup"],
        "keywords": ["controller", "router group controller", "RouterConfigInterface","router"],
        "text": "controller path must be under (./config/container.ts[ControllerDir]) path declaration. can be shorthanded if '@' is present before the file declaration e.g. : 'posts@PostController' then the route endpoint can be shorthanded as route.post('index', 'index'),  this will translate to (posts/PostController@index) "
      },
      {
        "id": "rgp-before",
        "label": "before",
        "reference": ["RouteGroup"],
        "keywords": ["before", "router group before", "RouterConfigInterface","router"],
        "text": "before() ev will be emitted before function/controller execution"
      },
      {
        "id": "rgp-after",
        "label": "after",
        "reference": ["RouteGroup"],
        "keywords": ["after", "router group after", "RouterConfigInterface","router"],
        "text": "after() will be emitted before sending a response object to the client"
      },
      {
        "id": "RouteEndpoint",
        "label": "Router Endpoint",
        "reference": ["RouterNamespace", "RouteGroup"],
        "keywords": ["router", "namespace", "endpoint"],
        "text": "Routing endpoint points to a callback function, which can be a Controller Method or a callback function. Endpoints is a part of a Router Namespace or can be a part of a route group. Endpoints also specifies the #HTTPMethod, and can have similar address but must have a different HTTPMethod."
      },
      {
        "id": "RouterServiceProvider",
        "label": "RouterServiceProvider",
        "sublabel": "[./src/container/services/RouterServiceProvider]",
        "keywords": ["RouterConfig", "RouterServiceProvider", "router"],
        "text": "In RouterServiceProvider file, Routers are registered inside the boot method, which is a ServiceProvider method, that is being executed before the server( @start) event, which is part of Chasi's lifecycle. ServiceProvider@boot method is mainly for collecting information, before it runs in the registry. Router instance needs to be invoked inside the boot function"
      },
      {
        "id": "RouterConfigInterface",
        "label": "Router configuraion type",
        "keywords": ["RouterConfigInterface", "router","type"],
        "text": "router type declaration"
      },
      {
        "id": "rci-name",
        "label": "name",
        "reference": ["RouterConfigInterface"],
        "keywords": ["name", "router name", "RouterConfigInterface","router"],
        "text": "the value will be used as an index and must be unique."
      },
      {
        "id": "rci-auth",
        "label": "auth",
        "reference": ["RouterConfigInterface"],
        "keywords": ["auth", "router auth", "RouterConfigInterface","router"],
        "text": "authentication can be configured from [./config/authentication] please specify a driver that is registered from the auth configuration file or you can set this parameter to false || null, if you intend not to use any auth for your router {String} {Boolean[false]} {null}"
      },
      {
        "id": "rci-prefix",
        "label": "prefix",
        "reference": ["RouterConfigInterface"],
        "keywords": ["prefix", "router prefix", "RouterConfigInterface","router"],
        "text": "value will be appended to all the routes that will be registered under a router's instance"
      },
      {
        "id": "rci-namespace",
        "label": "namespace",
        "reference": ["RouterConfigInterface"],
        "keywords": ["namespace", "router namespace", "RouterConfigInterface","router"],
        "text": "a string path to a router container file."
      },
      {
        "id": "rci-middleware",
        "label": "middleware",
        "reference": ["RouterConfigInterface"],
        "keywords": ["middleware", "router middleware", "RouterConfigInterface","router"],
        "text": "middleware/s listed under this property will be implemented, to all the routes registered in the instance, except* if the route endpoint/group have a declaration of a middleware excemption"
      },
      {
        "id": "rci-controllerDir",
        "label": "controllerdir",
        "reference": ["RouterConfigInterface"],
        "keywords": ["controllerdir", "router controllerdir", "RouterConfigInterface","router"],
        "text": "a string path/s that will be added to router's controller path registry."
      },
      {
        "id": "rci-AuthRouteExceptions",
        "label": "AuthRouteExceptions?",
        "reference": ["RouterConfigInterface"],
        "keywords": ["AuthRouteExceptions", "router AuthRouteExceptions", "RouterConfigInterface","router"],
        "text": "Option to excempt a route endpoint/s from AuthGuards, all routes that will be excempted in Auth implementations will have no access to the [request.auth] property in <Request>."
      },
      {
        "id": "rci-data",
        "label": "data?",
        "reference": ["RouterConfigInterface"],
        "keywords": ["data", "router data", "RouterConfigInterface","router"],
        "text": "router hook, declared data inside this hook will be avilable throughout this Router[Instance] you can access data property via this.$data inside a controller/method or by adding a 3rd argument in a route function"
      },
      {
        "id": "rci-mount",
        "label": "mount?",
        "reference": ["RouterConfigInterface"],
        "keywords": ["mount", "router mount", "RouterConfigInterface","router"],
        "text": "a router hook where third party modules can be registered/mounted"
      },
      {
        "id": "rci-before",
        "label": "before?",
        "reference": ["RouterConfigInterface"],
        "keywords": ["before", "router before", "RouterConfigInterface","router"],
        "text": "this function will be invoke before a request is passed into controller/handler function."
      },
      {
        "id": "rci-after",
        "label": "after?",
        "reference": ["RouterConfigInterface"],
        "keywords": ["after", "router after", "RouterConfigInterface","router"],
        "text": "this function will be invoked before a request is sent back to the client."
      },
      {
        "id": "rci-displayLog",
        "label": "displayLog?",
        "reference": ["RouterConfigInterface"],
        "keywords": ["displayLog", "router displayLog", "RouterConfigInterface","router"],
        "text": "an option to print route information in the terminal."
      }
    ],
    "controls": {
      "right": {
        "open": true
      },
      "header": {
        "subheader": {
          "open": false
        }
      }
    }
  }
}